/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JsonTablePlugin
});
module.exports = __toCommonJS(main_exports);

// src/functions.ts
function trimSeperatorSpaces(string) {
  return string.replace(/([^\S\r\n]*[|][^\S\r\n]*)/g, "|");
}
function collectAllKeys(input) {
  const keys = [];
  for (const obj of input) {
    const jsonObject = obj;
    for (const key in jsonObject) {
      if (jsonObject.hasOwnProperty(key) && !keys.includes(key)) {
        keys.push(key);
      }
    }
  }
  return keys;
}
function jsonToTable(content) {
  const jsonData = JSON.parse(content);
  if (!jsonData || jsonData.length === 0) {
    return "";
  }
  const headers = collectAllKeys(jsonData);
  const headerRow = `| ${headers.join(" | ")} |`;
  const separatorRow = `| ${headers.map(() => "---").join(" | ")} |`;
  const dataRows = jsonData.map(
    (data) => {
      return `| ${headers.map((header) => data[header]).join(" | ")} |`;
    }
  );
  const markdownTable = [
    headerRow,
    separatorRow,
    ...dataRows.map((row) => row.replace(/( {2,})/g, " "))
  ].join("\n");
  return markdownTable;
}
function tableToJson(content) {
  const tableObject = [];
  content = trimSeperatorSpaces(content);
  const lines = content.split("\n").map((line) => line.trim());
  if (lines.length <= 2) {
    return tableObject;
  }
  const headers = lines[0].substring(1, lines[0].length - 1).split("|");
  const rows = lines.slice(2);
  for (const row of rows) {
    const rowData = row.slice(1, -1).split("|");
    const rowObject = {};
    for (let i = 0; i < headers.length; i++) {
      rowObject[headers[i]] = rowData[i];
    }
    tableObject.push(rowObject);
  }
  return tableObject;
}

// src/main.ts
var import_obsidian2 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var JsonTablePluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Enable debug logging").setDesc("If enabled, more will be logged in the console.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.devMode).onChange(async (value) => {
        this.plugin.settings.devMode = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  devMode: false
};
var JsonTablePlugin = class extends import_obsidian2.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "generate-table-from-selected-json",
      name: "Generate table from selected JSON",
      icon: "table",
      editorCallback: (editor) => {
        if (this.settings.devMode) {
          console.log("JSON Table Selection:", editor.getSelection());
        }
        try {
          editor.replaceSelection(jsonToTable(editor.getSelection()));
        } catch (error) {
          console.error(error);
          new import_obsidian2.Notice(error);
        }
      }
    });
    this.addCommand({
      id: "generate-table-from-selected-json-url",
      name: "Generate table from selected JSON URL",
      icon: "link",
      editorCallback: async (editor) => {
        const selection = editor.getSelection();
        try {
          const response = await (0, import_obsidian2.requestUrl)(selection);
          editor.replaceSelection(
            jsonToTable(JSON.stringify(response.json))
          );
          if (this.settings.devMode) {
            console.log(
              "JSON Table fetch response:",
              response.json
            );
          }
        } catch (error) {
          console.error(error);
          new import_obsidian2.Notice(error);
        }
      }
    });
    this.addCommand({
      id: "generate-json-from-selected-table",
      name: "Generate JSON from selected table",
      icon: "file-json",
      editorCallback: (editor) => {
        if (this.settings.devMode) {
          console.log("JSON Table Selection:", editor.getSelection());
        }
        try {
          editor.replaceSelection(
            JSON.stringify(tableToJson(editor.getSelection()))
          );
        } catch (error) {
          console.error(error);
          new import_obsidian2.Notice(error);
        }
      }
    });
    this.addSettingTab(new JsonTablePluginSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
